Index: src/main/java/TSP/Prim/EulerianCycle.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package TSP.Prim;\n\nimport java.util.*;\n\npublic class EulerianCycle {\n    private Queue<Integer> cycle = new LinkedList<>();\n    private int[] degree;\n\n    private Queue<Edge> multigraph;\n\n    public EulerianCycle() {\n    }\n\n    public EulerianCycle(Queue<Edge> multigraph) {\n        this.multigraph = multigraph;\n        int V = getNumberOfVertices(multigraph);\n        degree = new int[V];\n\n        // Create adjacency list and count degree of each vertex\n        List<Edge>[] adj = createAdjacencyList(multigraph);\n        for (int v = 0; v < V; v++) {\n            for (Edge e : adj[v]) {\n                degree[v]++;\n            }\n        }\n\n        // Find a vertex with nonzero degree (if it exists)\n        int min = 0;\n        int max = 155;\n        int random_int = (int)Math.floor(Math.random() * (max - min + 1) + min);\n//        int s = 0;\n        int s = random_int;\n        System.out.println(\"value of s in Eulerian cycle which is the value of starting vertex \" + s);\n\n        while (s < V && degree[s] % 2 == 0) {\n            s++;\n        }\n        if (s == V) {\n            // Graph has even degree, so start anywhere\n//            s = 0;\n            s = random_int;\n\n        }\n\n        Stack<Integer> stack = new Stack<>();\n        stack.push(s);\n\n        while (!stack.isEmpty()) {\n            int v = stack.pop();\n            while (!adj[v].isEmpty()) {\n                Edge e = adj[v].remove(0);\n//                System.out.println(\"edge \" + e);\n                int w = e.other(v);\n                stack.push(v);\n                v = w;\n            }\n            cycle.add(v);\n        }\n        System.out.println(\"printing cycle \" + cycle);\n\n        // Check that all edges have been visited\n        if (cycle.size() != getNumberOfEdges(multigraph) + 1) {\n            cycle = null;\n        }\n    }\n\n    public boolean hasEulerianCycle() {\n        return cycle != null;\n    }\n\n    public Queue<Integer> eulerianCycle() {\n        return cycle;\n    }\n\n    private int getNumberOfVertices(Queue<Edge> multigraph) {\n        Set<Integer> vertices = new HashSet<>();\n        for (Edge e : multigraph) {\n            vertices.add(e.either());\n            vertices.add(e.other(e.either()));\n        }\n        return vertices.size();\n    }\n\n    private int getNumberOfEdges(Queue<Edge> multigraph) {\n        return multigraph.size() * 2;\n    }\n\n    private List<Edge>[] createAdjacencyList(Queue<Edge> multigraph) {\n        int V = getNumberOfVertices(multigraph);\n        List<Edge>[] adj = new List[V];\n        for (int i = 0; i < V; i++) {\n            adj[i] = new ArrayList<>();\n        }\n        for (Edge e : multigraph) {\n            int v = e.either();\n            int w = e.other(v);\n            adj[v].add(e);\n            adj[w].add(e);\n        }\n        return adj;\n    }\n\n    public List<Integer> hamiltonianCircuitPath(Queue<Integer> eulerianCycle  ) {\n\n\n        int firstVertex = eulerianCycle.element();\n\n        Set<Integer> removeDuplicates = new LinkedHashSet<>(eulerianCycle);\n        System.out.println(\"hamilton circuit \" + removeDuplicates);\n        List<Integer> listVertices = new ArrayList<>(removeDuplicates.stream().toList());\n        listVertices.add(firstVertex);\n        System.out.println(\"after adding initial vertex \" + listVertices);\n\n       return listVertices;\n    }\n\n    public double hamiltonianCircuitTourWeight( List<Integer> listVertices,List<CityDetails> places){\n        double tourWeight = 0;\n        for (int i = 0; i < listVertices.size() - 1; i++) {\n            int a = listVertices.get(i);\n            int b = listVertices.get(i + 1);\n//            System.out.println(\"a \" + a);\n//            System.out.println(\"b \" + b);\n            double distanceUsingFormula = getDistance(a,b, places);\n//            System.out.println(\"distance in km for given points \" + a + \" and \" + b + \" is \" + distanceUsingFormula);\n            tourWeight = tourWeight + distanceUsingFormula;\n        }\n\n        System.out.println(\"tour weight \" + tourWeight);\n\n        return tourWeight;\n    }\n    public double getDistance(int a, int b, List<CityDetails> places) {\n\n        double lat1 = places.get(a).getLat();\n        double lng1 = places.get(a).getLng();\n\n        double lat2 = places.get(b).getLat();\n        double lng2 = places.get(b).getLng();\n\n        double result = distanceUsingFormula(lat1, lat2, lng1,lng2);\n\n\n        return result;\n    }\n\n    public double distanceUsingFormula(double lat1, double lat2, double lng1, double lng2) {\n//        System.out.println(\"lat1 \" + lat1 + \" lat2 \" + lat2 + \" lng1 \" + lng1 + \" lng2 \" + lng2);\n        lng1 = Math.toRadians(lng1);\n        lng2 = Math.toRadians(lng2);\n        lat1 = Math.toRadians(lat1);\n        lat2 = Math.toRadians(lat2);\n\n//        System.out.println(\"after radian conversion \" + \"lat1 \" + lat1 + \" lat2 \" + lat2 + \" lng1 \" + lng1 + \" lng2 \" + lng2);\n\n        // Haversine formula\n        double dlon = lng2 - lng1;\n        double dlat = lat2 - lat1;\n        double a = Math.pow(Math.sin(dlat / 2), 2)\n                + Math.cos(lat1) * Math.cos(lat2)\n                * Math.pow(Math.sin(dlon / 2),2);\n\n        double c = 2 * Math.asin(Math.sqrt(a));\n\n        // Radius of earth in kilometers. Use 3956\n        // for miles\n        double r = 6371;\n\n        // calculate the result\n        return(c * r);\n    }\n\n    public static void main(String[] args) {\n        EulerianCycle eCycle = new EulerianCycle();\n        double lat1 = 51.514195;\n        double lat2 = 51.515753;\n        double lgn1 = -0.145735;\n        double lgn2 = -0.143092;\n\n        double weight = eCycle.distanceUsingFormula(lat1, lat2, lgn1,lgn2);\n        System.out.println(weight);\n    }\n\n\n\n\n\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/TSP/Prim/EulerianCycle.java b/src/main/java/TSP/Prim/EulerianCycle.java
--- a/src/main/java/TSP/Prim/EulerianCycle.java	(revision af65859f215a28d921ef8f841c0e977728caebe3)
+++ b/src/main/java/TSP/Prim/EulerianCycle.java	(date 1681682631646)
@@ -114,7 +114,7 @@
        return listVertices;
     }
 
-    public double hamiltonianCircuitTourWeight( List<Integer> listVertices,List<CityDetails> places){
+    public double hamiltonianCircuitTourWeight(List<Integer> listVertices, List<CityDetails> places){
         double tourWeight = 0;
         for (int i = 0; i < listVertices.size() - 1; i++) {
             int a = listVertices.get(i);
Index: src/main/java/TSP/Prim/Prims.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package TSP.Prim;\n\nimport Optimization.TwoOpt;\n\nimport java.util.*;\n\npublic class Prims {\n    private boolean[] marked; // MST vertices\n    private Queue<Edge> mst; // MST edges\n    private MinPQ<Edge> pq; // crossing (and ineligible) edges\n\n    public Prims(EdgeWeightedGraph G) {\n        pq = new MinPQ<Edge>();\n        marked = new boolean[G.V()];\n        mst = new LinkedList<>();\n        visit(G, 0); // assumes G is connected\n        while (!pq.isEmpty()) {\n            Edge e = pq.delMin(); // Get lowest-weight\n            int v = e.either(), w = e.other(v); // edge from pq.\n            if (marked[v] && marked[w]) continue; // Skip if ineligible.\n            mst.add(e); // Add edge to tree.\n            if (!marked[v]) visit(G, v); // Add vertex to tree\n            if (!marked[w]) visit(G, w); // (either v or w).\n        }\n    }\n\n    private void visit(EdgeWeightedGraph G, int v) { // Mark v and add to pq all edges from v to unmarked vertices.\n        marked[v] = true;\n        for (Edge e : G.adj(v))\n            if (!marked[e.other(v)]) pq.insert(e);\n    }\n\n    public Iterable<Edge> edges() {\n        return mst;\n    }\n\n    public static void main(String[] args) {\n\n\n        CityDataHelper helper = new CityDataHelper();\n        List<CityDetails> cityDetailsList = helper.cityList();\n        HashMap<String, Double> cityWeightMap = helper.cityDistances(cityDetailsList);\n        System.out.println(\"city Weights \"+ cityWeightMap);\n        EdgeWeightedGraph edgeWeightedGraph = new EdgeWeightedGraph(156);\n\n        for (int i = 0; i < 155; i++) {\n            for (int j = i + 1; j < 156; j++) {\n                double val = cityWeightMap.get(\"\" + i + \"-\" + \"\" + j);\n                Edge e = new Edge(i, j, val);\n                edgeWeightedGraph.addEdge(e);\n            }\n        }\n\n//        System.out.println(\"edge weighted graph in loop \" + edgeWeightedGraph);\n//        System.out.println(\"edge weighted graph in loop \" + edgeWeightedGraph);\n//        EdgeWeightedGraph edgeWeightedGraph = new EdgeWeightedGraph(5);\n//        Edge e1 = new Edge(0, 1, 12);\n//        Edge e2 = new Edge(0, 2, 10);\n//        Edge e3 = new Edge(0, 3, 19);\n//        Edge e4 = new Edge(0, 4, 8);\n//        Edge e5 = new Edge(1, 2, 3);\n//        Edge e6 = new Edge(1, 3, 7);\n//        Edge e7 = new Edge(1, 4, 2);\n//        Edge e8 = new Edge(2, 3, 6);\n//        Edge e9 = new Edge(2, 4, 4);\n//        Edge e10 = new Edge(3, 4, 4);\n//\n//        edgeWeightedGraph.addEdge(e1);\n//        edgeWeightedGraph.addEdge(e2);\n//        edgeWeightedGraph.addEdge(e3);\n//        edgeWeightedGraph.addEdge(e4);\n//        edgeWeightedGraph.addEdge(e5);\n//        edgeWeightedGraph.addEdge(e6);\n//        edgeWeightedGraph.addEdge(e7);\n//        edgeWeightedGraph.addEdge(e8);\n//        edgeWeightedGraph.addEdge(e9);\n//        edgeWeightedGraph.addEdge(e10);\n\n\n\n        Prims prims = new Prims(edgeWeightedGraph);\n        System.out.println(\"number of vertices \" + edgeWeightedGraph.V());\n//        System.out.println(\"city details size \" + cityDetailsList.size());\n\n        System.out.println(\"minimum spanning tree \" + prims.mst);\n        HashMap<Integer, Integer> oddEvenVertices = FindOddVertices.getOddEvenVertices(prims.mst);\n        System.out.println(\"odd even vertices \" + oddEvenVertices);\n        ArrayList<Integer> oddVerticesArrayList = new ArrayList<>();\n        oddVerticesArrayList = FindOddVertices.oddVertices(oddEvenVertices);\n        System.out.println(\"array entries of odd vertices \" + oddVerticesArrayList);\n\n        List<Edge> pairs = PerfectMatching.PerfectMatchingPairs(edgeWeightedGraph, oddVerticesArrayList);\n        System.out.println(\"pairs \" + pairs);\n        System.out.println( \"number of pairs \" + pairs.size());\n        prims.mst.addAll(pairs);\n        System.out.println(\"multigraph after adding pairs \" + prims.mst);\n\n        EulerianCycle eu = new EulerianCycle(prims.mst);\n        System.out.println(\"printing Eulerian cycle \" + eu.eulerianCycle());\n        System.out.println(\"has Eulerian cycle \" + eu.hasEulerianCycle());\n        Queue<Integer> eulerTour = eu.eulerianCycle();\n        System.out.println(\"euler tour \" + eulerTour);\n        List<Integer> hamiltonianCircuitPathList = eu.hamiltonianCircuitPath(eulerTour);\n        System.out.println(\" hamilton tour path \" + hamiltonianCircuitPathList);\n        double hamiltonianCircuitTourWeight = eu.hamiltonianCircuitTourWeight(hamiltonianCircuitPathList,cityDetailsList);\n        System.out.println(\" hamilton tour path weight \" + hamiltonianCircuitTourWeight);\n        TwoOpt twoOptObject = new TwoOpt();\n        //twoOptObject.twoOptCalculation(hamiltonianCircuitPathList,cityWeightMap);\n        System.out.println(\"inside twoOptCalculation method \"+ twoOptObject.twoOptCalculation(hamiltonianCircuitPathList,cityWeightMap,hamiltonianCircuitTourWeight));\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/TSP/Prim/Prims.java b/src/main/java/TSP/Prim/Prims.java
--- a/src/main/java/TSP/Prim/Prims.java	(revision af65859f215a28d921ef8f841c0e977728caebe3)
+++ b/src/main/java/TSP/Prim/Prims.java	(date 1681682752842)
@@ -83,7 +83,17 @@
 //        System.out.println("city details size " + cityDetailsList.size());
 
         System.out.println("minimum spanning tree " + prims.mst);
+        double mstCost = 0.0;
+        for(Edge edge: prims.mst)
+        {
+            double var1 = edge.getWeight();
+            mstCost = mstCost + var1;
+        }
+        System.out.println("mst cost " + mstCost);
+
+
         HashMap<Integer, Integer> oddEvenVertices = FindOddVertices.getOddEvenVertices(prims.mst);
+
         System.out.println("odd even vertices " + oddEvenVertices);
         ArrayList<Integer> oddVerticesArrayList = new ArrayList<>();
         oddVerticesArrayList = FindOddVertices.oddVertices(oddEvenVertices);
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"df373020-7133-4408-9f68-a5a2f378d4c9\" name=\"Changes\" comment=\"\">\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/Optimization/TwoOpt.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/Optimization/TwoOpt.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/TSP/Prim/Prims.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/TSP/Prim/Prims.java\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Class\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"MarkdownSettingsMigration\">\n    <option name=\"stateVersion\" value=\"1\" />\n  </component>\n  <component name=\"ProjectId\" id=\"2Nt7XxDraW1YBHDpDtSEiMlY8no\" />\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\n    <ConfirmationsSetting value=\"1\" id=\"Add\" />\n  </component>\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">{\n  &quot;keyToString&quot;: {\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\n    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,\n    &quot;last_opened_file_path&quot;: &quot;/Users/aishwaryavenkatesan/Desktop/programming struct algo/INFO6205_S01_FinalProject_AH&quot;,\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;\n  }\n}</component>\n  <component name=\"RunManager\" selected=\"Application.Prims\">\n    <configuration name=\"CalculateCityWeights\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"TSP.Prim.CalculateCityWeights\" />\n      <module name=\"INFO6205_S01_FinalProject_AH\" />\n      <extension name=\"coverage\">\n        <pattern>\n          <option name=\"PATTERN\" value=\"TSP.Prim.*\" />\n          <option name=\"ENABLED\" value=\"true\" />\n        </pattern>\n      </extension>\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"EulerianCycle\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"TSP.Prim.EulerianCycle\" />\n      <module name=\"INFO6205_S01_FinalProject_AH\" />\n      <extension name=\"coverage\">\n        <pattern>\n          <option name=\"PATTERN\" value=\"TSP.Prim.*\" />\n          <option name=\"ENABLED\" value=\"true\" />\n        </pattern>\n      </extension>\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"Prims\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"ALTERNATIVE_JRE_PATH\" value=\"17\" />\n      <option name=\"ALTERNATIVE_JRE_PATH_ENABLED\" value=\"true\" />\n      <option name=\"MAIN_CLASS_NAME\" value=\"TSP.Prim.Prims\" />\n      <module name=\"Final_Project_PSA_S01_AH\" />\n      <extension name=\"coverage\">\n        <pattern>\n          <option name=\"PATTERN\" value=\"TSP.Prim.*\" />\n          <option name=\"ENABLED\" value=\"true\" />\n        </pattern>\n      </extension>\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <recent_temporary>\n      <list>\n        <item itemvalue=\"Application.Prims\" />\n        <item itemvalue=\"Application.EulerianCycle\" />\n        <item itemvalue=\"Application.CalculateCityWeights\" />\n      </list>\n    </recent_temporary>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"df373020-7133-4408-9f68-a5a2f378d4c9\" name=\"Changes\" comment=\"\" />\n      <created>1680471571011</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1680471571011</updated>\n      <workItem from=\"1680472783773\" duration=\"1146000\" />\n      <workItem from=\"1680477404144\" duration=\"48000\" />\n      <workItem from=\"1680477459434\" duration=\"72000\" />\n      <workItem from=\"1680554166447\" duration=\"3749000\" />\n      <workItem from=\"1681155327663\" duration=\"771000\" />\n      <workItem from=\"1681421993757\" duration=\"18706000\" />\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"hamiltonian circuit\">\n      <created>1681333605709</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1681333605709</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"2\" />\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State />\n          </value>\n        </entry>\n      </map>\n    </option>\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"hamiltonian circuit\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"hamiltonian circuit\" />\n  </component>\n  <component name=\"XDebuggerManager\">\n    <breakpoint-manager>\n      <breakpoints>\n        <breakpoint enabled=\"true\" type=\"java-exception\">\n          <properties class=\"java.util.NoSuchElementException\" package=\"java.util\" />\n          <option name=\"timeStamp\" value=\"2\" />\n        </breakpoint>\n        <breakpoint enabled=\"true\" type=\"java-exception\">\n          <properties class=\"java.lang.IllegalArgumentException\" package=\"java.lang\" />\n          <option name=\"timeStamp\" value=\"13\" />\n        </breakpoint>\n        <line-breakpoint enabled=\"true\" type=\"java-field\">\n          <url>file://$PROJECT_DIR$/src/main/java/TSP/Prim/EulerianTour.java</url>\n          <line>9</line>\n          <properties field=\"mstWithEvenVertices\" class=\"TSP.Prim.EulerianTour\" />\n          <option name=\"timeStamp\" value=\"3\" />\n        </line-breakpoint>\n      </breakpoints>\n    </breakpoint-manager>\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision af65859f215a28d921ef8f841c0e977728caebe3)
+++ b/.idea/workspace.xml	(date 1681681899427)
@@ -6,7 +6,7 @@
   <component name="ChangeListManager">
     <list default="true" id="df373020-7133-4408-9f68-a5a2f378d4c9" name="Changes" comment="">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/Optimization/TwoOpt.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Optimization/TwoOpt.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/TSP/Prim/EulerianCycle.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/TSP/Prim/EulerianCycle.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/TSP/Prim/Prims.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/TSP/Prim/Prims.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
@@ -75,7 +75,7 @@
       <option name="ALTERNATIVE_JRE_PATH" value="17" />
       <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="true" />
       <option name="MAIN_CLASS_NAME" value="TSP.Prim.Prims" />
-      <module name="Final_Project_PSA_S01_AH" />
+      <module name="INFO6205_S01_FinalProject_AH" />
       <extension name="coverage">
         <pattern>
           <option name="PATTERN" value="TSP.Prim.*" />
